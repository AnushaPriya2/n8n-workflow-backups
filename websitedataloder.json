{
  "active": false,
  "connections": {
    "Loop Over Items2": {
      "main": [
        [],
        [
          {
            "node": "Code12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set File ID1": {
      "main": [
        [
          {
            "node": "Insert Document Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Google Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compare Datasets": {
      "main": [
        [],
        [],
        [],
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "S3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "S3": {
      "main": [
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Insert into Supabase Vectorstore2",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Upload": {
      "main": [
        [
          {
            "node": "Mistral Signed URL",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Signed URL": {
      "main": [
        [
          {
            "node": "Mistral DOC OCR3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral DOC OCR3": {
      "main": [
        [
          {
            "node": "Mistral file delete5",
            "type": "main",
            "index": 0
          },
          {
            "node": "Wait3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code11": {
      "main": [
        [
          {
            "node": "Mistral Upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code9": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code10": {
      "main": [
        [
          {
            "node": "Insert into Supabase Vectorstore2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Mistral Cloud": {
      "ai_embedding": [
        [
          {
            "node": "Insert into Supabase Vectorstore2",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Code10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait3": {
      "main": [
        [
          {
            "node": "Code9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code12": {
      "main": [
        [
          {
            "node": "Set File ID1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase2": {
      "main": [
        [
          {
            "node": "Edit Fields9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields9": {
      "main": [
        []
      ]
    },
    "Insert Document Metadata2": {
      "main": [
        []
      ]
    },
    "Insert into Supabase Vectorstore2": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive": {
      "main": [
        [
          {
            "node": "Compare Datasets",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Google Drive3": {
      "main": [
        [
          {
            "node": "Code11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Document Metadata": {
      "main": [
        [
          {
            "node": "Google Drive3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "nosta site bot",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "ai_tool": [
        [
          {
            "node": "nosta site bot",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Web Search 2": {
      "ai_tool": [
        []
      ]
    },
    "Web Search 1": {
      "ai_tool": [
        [
          {
            "node": "nosta site bot",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "List Documents": {
      "ai_tool": [
        [
          {
            "node": "nosta site bot",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Cloud Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "nosta site bot",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "nosta site bot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Mistral Cloud1": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-09T06:04:23.167Z",
  "id": "H7yy201KmB70xczI",
  "meta": null,
  "name": "websitedataloder",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -2360,
        380
      ],
      "id": "6d1dccd4-8616-4ba0-84c9-ef99da78f34b",
      "name": "Loop Over Items2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "10646eae-ae46-4327-a4dc-9987c2d76173",
              "name": "file_id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "f4536df5-d0b1-4392-bf17-b8137fb31a44",
              "name": "file_type",
              "value": "={{ $json.mimeType }}",
              "type": "string"
            },
            {
              "id": "77d782de-169d-4a46-8a8e-a3831c04d90f",
              "name": "file_title",
              "value": "={{ $json.name }}",
              "type": "string"
            },
            {
              "id": "9bde4d7f-e4f3-4ebd-9338-dce1350f9eab",
              "name": "file_url",
              "value": "={{ $json.webViewLink }}",
              "type": "string"
            },
            {
              "id": "fae402c8-c486-4b57-8d28-bf669db6b442",
              "name": "last_modified_date",
              "value": "={{ $json.modifiedTime }}",
              "type": "string"
            },
            {
              "id": "866ce582-16e2-4869-ac77-13f248c187eb",
              "name": "sharepoint_file_id",
              "value": "={{ $json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "4986c2a6-7093-43bb-b355-644906b68ca2",
      "name": "Set File ID1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1940,
        380
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -3460,
        380
      ],
      "id": "40b5e2a4-bd57-4e95-a289-7c3e29373af4",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "mergeByFields": {
          "values": [
            {
              "field1": "sharepoint_file_id",
              "field2": "UniqueId"
            },
            {
              "field1": "Last_modified_date",
              "field2": "TimeLastModified"
            },
            {
              "field1": "Loading Done",
              "field2": "Exists"
            }
          ]
        },
        "fuzzyCompare": true,
        "options": {}
      },
      "type": "n8n-nodes-base.compareDatasets",
      "typeVersion": 2.3,
      "position": [
        -2740,
        300
      ],
      "id": "8f0b9920-d1bf-471c-87fe-84453631305b",
      "name": "Compare Datasets"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5132d92c-41da-4a55-ad79-0c329ca7e626",
              "name": "Document name",
              "value": "={{ $('Set File ID1').item.json.file_title.replaceSpecialChars() }}",
              "type": "string"
            },
            {
              "id": "c8160701-2be7-43c6-bcfa-295fbebe0e23",
              "name": "Document data",
              "value": "={{ $json.embedding_text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        80,
        380
      ],
      "id": "28d48b43-138d-4048-9cb6-5e97b04449a1",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "data",
        "options": {
          "fileName": "={{ $('Insert Document Metadata2').item.json.id_source +\"_\"+ $json.fileName}}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        760,
        100
      ],
      "id": "72198051-d2a2-40cd-be72-8c3516245f4c",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"data\": \"{{$json['image_base64'].split(',').pop()}}\",\n  \"fileName\": \"{{$json.id}}\",\n  \"mimeType\": \"image/jpeg\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        520,
        100
      ],
      "id": "ba5458de-40ef-4550-9d30-4e8742e229a1",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7e6dcc66-0501-4739-a738-909878c4b23d",
              "name": "images",
              "value": "={{ $json.images }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        0,
        0
      ],
      "id": "de12e164-4d0d-4185-89d7-bfeb9cea71f9",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "fieldToSplitOut": "images",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        360,
        100
      ],
      "id": "290ff3ed-e437-4a27-bed3-d01f6fe5cdab",
      "name": "Split Out"
    },
    {
      "parameters": {
        "operation": "upload",
        "bucketName": "ragtest",
        "fileName": "=",
        "additionalFields": {
          "parentFolderKey": "extracted_images"
        }
      },
      "type": "n8n-nodes-base.s3",
      "typeVersion": 1,
      "position": [
        960,
        100
      ],
      "id": "76172ce3-fe18-48d8-89b5-e48298f58995",
      "name": "S3",
      "retryOnFail": true,
      "credentials": {
        "s3": {
          "id": "GDRbU9L8IZkO1nYn",
          "name": "S3 account rn dbt test"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "d15e917b-43d2-40b8-8b49-af467ff63961",
              "leftValue": "={{ $json.data[0].parseJson().skipped }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -140,
        400
      ],
      "id": "8966804e-1bad-4539-a6a4-bf86460e750d",
      "name": "If1"
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.content.parseJson().pageContent.toJsonString() }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "source",
                "value": "={{ $('Google Drive3').item.json.url }}"
              },
              {
                "name": "blobType",
                "value": "application/jsonb"
              },
              {
                "name": "loc",
                "value": "={{ $json.content.parseJson().metadata.loc }}"
              },
              {
                "name": "source_metadata_id",
                "value": "={{ $('Set File ID1').item.json.file_id }}"
              }
            ]
          }
        }
      },
      "id": "3c063f11-dd48-4edf-97b1-4beb049e293d",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        680,
        620
      ]
    },
    {
      "parameters": {
        "chunkSize": 100000
      },
      "id": "397afdc7-0fb7-47c7-ae62-6c2f46ff6a42",
      "name": "Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        600,
        840
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "purpose",
              "value": "ocr"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "d4354cdb-929c-4893-a19a-aaf13304e913",
      "name": "Mistral Upload",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -1120,
        400
      ],
      "typeVersion": 4.2,
      "credentials": {
        "mistralCloudApi": {
          "id": "uXnHG2tXx33Gkexl",
          "name": "Mistral Cloud account(dbt)"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "=https://api.mistral.ai/v1/files/{{ $json.id }}/url",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "expiry",
              "value": "24"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "9c94dc1d-80fb-4917-b558-8a1df064bfa2",
      "name": "Mistral Signed URL",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -940,
        400
      ],
      "typeVersion": 4.2,
      "credentials": {
        "mistralCloudApi": {
          "id": "uXnHG2tXx33Gkexl",
          "name": "Mistral Cloud account(dbt)"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/ocr",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"mistral-ocr-latest\",\n  \"document\": {\n    \"document_url\": \"{{ $json.url }}\"\n  },\n  \"bbox_annotation_format\": {\n    \"type\": \"json_schema\",\n    \"json_schema\": {\n      \"schema\": {\n        \"properties\": {\n          \"image_type\": { \"title\": \"Image_Type\", \"type\": \"string\", \"description\": \"type of image\" },\n          \"short_description\": { \"title\": \"Short_Description\", \"type\": \"string\", \"description\": \"short description\" },\n          \"summary\": { \"title\": \"Summary\", \"type\": \"string\", \"description\": \"summary of the image\" }\n        },\n        \"required\": [\"image_type\",\"short_description\",\"summary\"],\n        \"title\": \"BBOXAnnotation\",\n        \"type\": \"object\",\n        \"additionalProperties\": false\n      },\n      \"name\": \"bbox_annotation\",\n      \"strict\": true\n    }\n  },\n  \"include_image_base64\": true\n}\n\n",
        "options": {}
      },
      "id": "90a33bcd-d435-4cbc-a301-51bfa486e1fe",
      "name": "Mistral DOC OCR3",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -800,
        400
      ],
      "typeVersion": 4.2,
      "credentials": {
        "mistralCloudApi": {
          "id": "uXnHG2tXx33Gkexl",
          "name": "Mistral Cloud account(dbt)"
        }
      }
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "=https://api.mistral.ai/v1/files/{{ $('Mistral Upload').item.json.id }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "431e152b-7075-4c81-ae07-57f503963597",
      "name": "Mistral file delete5",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -400,
        180
      ],
      "typeVersion": 4.2,
      "credentials": {
        "mistralCloudApi": {
          "id": "uXnHG2tXx33Gkexl",
          "name": "Mistral Cloud account(dbt)"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "$input.item.binary.data.fileName = $input.first().json.title\n\nreturn $input.item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1280,
        400
      ],
      "id": "9787b3ac-fb83-4963-a9fc-dfd7c8171aa5",
      "name": "Code11"
    },
    {
      "parameters": {
        "jsCode": "// n8n Function node\n// Keeps image array from input, inserts embedding_text inline with images\n\nconst pages = items[0].json.pages;\nlet output = [];\n\nfor (const page of pages) {\n  let text = `Page ${page.index}\\n\\n`;\n  let markdown = page.markdown;\n\n  // Replace each image markdown with annotation text if available\n  markdown = markdown.replace(/!\\[(.*?)\\]\\((.*?)\\)/g, (match, alt, src) => {\n    const img = page.images.find(i => i.id === src || i.fileName === src);\n    if (img && img.image_annotation) {\n      const ann = JSON.parse(img.image_annotation);\n      return (\n        '{' +\n        `Image: [${img.id}]\\n` +\n        `Type: ${ann.image_type}\\n` +\n        `Short: ${ann.short_description}\\n` +\n        `Summary: ${ann.summary}\\n` +\n        '}'\n      );\n    }\n    return \"\"; // if no annotation, strip it\n  });\n\n  text += markdown.trim();\n\n  output.push({\n    json: {\n      page_index: page.index,\n      embedding_text: text,\n      images: page.images   // ✅ keep original images array\n    }\n  });\n}\n\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -320,
        400
      ],
      "id": "ed7294ec-b742-499a-8afa-37ac642b6786",
      "name": "Code9"
    },
    {
      "parameters": {
        "jsCode": "// Code10 (idempotent): If input is already chunked, pass through. Otherwise perform chunking.\n// Config:\nconst DEFAULT_CHUNK_SIZE = 1800;   // desired chunk size\nconst DEFAULT_OVERLAP = 0.3;       // 30% overlap\n\n// Helpers\nfunction isAlreadyChunkedInput(items) {\n  // Heuristic: if the first item content is a JSON string with pageContent OR metadata includes chunk_index\n  if (!items || items.length === 0) return false;\n  try {\n    const first = items[0].json;\n    if (!first) return false;\n    // if content looks like already chunked object stringified\n    if (typeof first.content === 'string') {\n      const parsed = JSON.parse(first.content);\n      if (parsed && (parsed.pageContent || parsed.metadata?.chunk_index !== undefined)) {\n        return true;\n      }\n    }\n    // or if the node already has chunk metadata at top level\n    if (first.metadata && first.metadata.chunk_index !== undefined) return true;\n    // or if the input is many short items likely produced by splitter -> treat as already split\n    if (items.length > 1 && items.every(it => (it.json.content || '').length <= DEFAULT_CHUNK_SIZE)) {\n      return true;\n    }\n  } catch (e) {\n    // ignore parse errors -> assume not chunked\n  }\n  return false;\n}\n\nfunction getObjLength(obj) {\n  return (obj.content || '').length;\n}\nfunction getObjLengthofTextOnly(obj) {\n  if (obj.type === 'image_ocr') return 0;\n  return (obj.content || '').length;\n}\n\n// split with overlap for a single large text string\nfunction splitTextWithOverlap(text, chunkSize, overlap) {\n  const step = Math.max(1, Math.floor(chunkSize * (1 - overlap)));\n  const parts = [];\n  for (let start = 0; start < text.length; start += step) {\n    parts.push(text.slice(start, start + chunkSize));\n  }\n  return parts;\n}\n\n// Main chunking function which accepts an array of objects (items) and returns array of { content, metadata }\nfunction chunkPageItems(arr, source, source_id, pageNum, chunkSize = DEFAULT_CHUNK_SIZE, overlap = DEFAULT_OVERLAP) {\n  // Flatten content strings\n  const pageText = arr.map(it => it.content || '').join(' ');\n\n  // Use splitTextWithOverlap to produce chunks\n  const parts = splitTextWithOverlap(pageText, chunkSize, overlap);\n  const response = [];\n  let charPos = 0;\n  for (let i = 0; i < parts.length; i++) {\n    const part = parts[i];\n    const from = charPos;\n    const to = charPos + (part || '').length;\n    const metadata = {\n      source,\n      source_metadata_id: source_id,\n      loc: { page: pageNum, Characters: { from, to } },\n      chunk_index: i\n    };\n    response.push({\n      content: JSON.stringify({\n        pageContent: [{ type: 'text', content: part }],\n        metadata\n      })\n    });\n    charPos = to;\n  }\n  return response;\n}\n\n// --- Entrypoint ---\nconst incoming = $input.all(); // array of items from previous node\n// If already chunked, pass through (normalize if needed)\nif (isAlreadyChunkedInput(incoming)) {\n  // Optionally normalize metadata for each item if not present\n  const pass = incoming.map((it, idx) => {\n    const json = it.json || {};\n    // ensure content is stringified chunk object (if it's already an object, keep it)\n    if (typeof json.content === 'object' && json.content !== null) {\n      return { json: { content: JSON.stringify(json.content), metadata: json.metadata || {} } };\n    }\n    // if content is a raw string that's small, assume it's already a chunk\n    return { json: { content: json.content, metadata: json.metadata || { chunk_index: idx } } };\n  });\n  return pass;\n}\n\n// Otherwise: Not chunked — perform chunking based on raw document pages\n// We expect input format: first item has fields: 'Document data' (array of pages), 'Document name', and insert metadata node contains id\nconst first = incoming[0] ? incoming[0].json : {};\nconst raw = first['Document data'] || []; // array of page strings\nconst source = first['Document name'] || (first.metadata && first.metadata.source) || '';\n// fallback for source_id from Set File ID node\nlet source_id = '';\ntry {\n  source_id = $('Insert Document Metadata2').first().json.id || $('Set File ID1').first().json.file_id || '';\n} catch (e) {\n  // safe fallback\n  source_id = first.metadata?.source_metadata_id || '';\n}\n\n// Build chunks page by page\nlet allChunks = [];\nraw.forEach((pageText, pageIndex) => {\n  // pageText may be a string or array of small blocks; normalize to array of objects\n  let arr = [];\n  if (Array.isArray(pageText)) {\n    arr = pageText;\n  } else {\n    arr = [{ type: 'text', content: pageText }];\n  }\n  const pageChunks = chunkPageItems(arr, source, source_id, pageIndex + 1, DEFAULT_CHUNK_SIZE, DEFAULT_OVERLAP);\n  allChunks.push(...pageChunks);\n});\n\n// Return in n8n format\nreturn allChunks.map(c => ({ json: c }));\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        380
      ],
      "id": "cbfc13e6-04da-4f23-8226-08b42cffabb1",
      "name": "Code10"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsMistralCloud",
      "typeVersion": 1,
      "position": [
        540,
        600
      ],
      "id": "5e395b1d-f660-476c-a28e-db699e1717b9",
      "name": "Embeddings Mistral Cloud",
      "credentials": {
        "mistralCloudApi": {
          "id": "uXnHG2tXx33Gkexl",
          "name": "Mistral Cloud account(dbt)"
        }
      }
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "Document data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        240,
        380
      ],
      "id": "ffbb4d60-c927-477f-93e0-322b580b98ac",
      "name": "Aggregate"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        980,
        380
      ],
      "id": "a003fa94-2a67-4b2e-8200-9bea5c20f6cb",
      "name": "Wait",
      "webhookId": "3b2de32e-b543-4a03-90cd-9b05e423339a"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1200,
        80
      ],
      "id": "ef934241-6e14-4fb3-90d9-fb606c09eb63",
      "name": "Wait2",
      "webhookId": "a93353d9-cb90-4f0c-bdf0-423c0ae9af9d"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -580,
        400
      ],
      "id": "ee799a98-1aea-43e8-b20b-253a2b4ab456",
      "name": "Wait3",
      "webhookId": "2dbecc76-246b-4613-92c2-d0581a190786"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node - SharePoint URL with Version Parameter\n// Use this in a \"Code\" node in n8n\n\nconst items = $input.all();\n\nconst outputItems = items.map(item => {\n  const data = item.json;\n  \n  // Use existing LinkingUrl if available\n  if (data.LinkingUrl) {\n    return {\n      json: {\n        ...data,\n        fileUrl: data.LinkingUrl\n      }\n    };\n  }\n  \n  // Construct versioned URL\n  let fileUrl = '';\n  \n  if (data.ServerRelativeUrl && data.ContentTag) {\n    // Base URL with server relative path\n    fileUrl = 'https://nosta.sharepoint.com' + data.ServerRelativeUrl;\n    \n    // Extract GUID from ContentTag and create version parameter\n    const guidMatch = data.ContentTag.match(/\\{([^}]+)\\}/);\n    if (guidMatch) {\n      const versionId = guidMatch[1].toLowerCase().replace(/-/g, '');\n      fileUrl += `?d=w${versionId}`;\n    }\n  }\n  \n  return {\n    json: {\n      ...data,\n      fileUrl: fileUrl\n    }\n  };\n});\n\nreturn outputItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2140,
        400
      ],
      "id": "9e0614c2-1277-4b1c-a4a3-a6be37d5d307",
      "name": "Code12"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "n8n_metadata",
        "returnAll": true
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -3260,
        80
      ],
      "id": "7dcb74b8-1006-4b52-9702-f52726ee1911",
      "name": "Supabase2",
      "credentials": {
        "supabaseApi": {
          "id": "8hlgdRRQJS9sMYJ1",
          "name": "Supabase account 3 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4244c0ca-eef1-4674-ae75-8c7f9f06018b",
              "name": "Last_modified_date",
              "value": "={{ $json[\"Last_modified_date\"] + \"Z\" }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2920,
        80
      ],
      "id": "3f6ce12b-f23d-40da-8517-e19af2e77e20",
      "name": "Edit Fields9"
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "nostasite_meta",
          "mode": "list",
          "cachedResultName": "nostasite_meta"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "id_source",
              "displayName": "id_source",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "url",
              "displayName": "url",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "last_modified_date",
              "displayName": "last_modified_date",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1780,
        -20
      ],
      "id": "c53247d4-eb4e-470e-935c-5f33fda411ee",
      "name": "Insert Document Metadata2",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "Lbgzg53k1R1pwGeo",
          "name": "Postgres account 4 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "nosta_siteembed",
          "mode": "list",
          "cachedResultName": "nosta_siteembed"
        },
        "options": {
          "queryName": "match_nosta_siteembed"
        }
      },
      "id": "7b29dfbf-2a96-4c4d-b6de-46a4701d03e1",
      "name": "Insert into Supabase Vectorstore2",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        620,
        360
      ],
      "credentials": {
        "supabaseApi": {
          "id": "8hlgdRRQJS9sMYJ1",
          "name": "Supabase account 3 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "searchMethod": "query",
        "limit": 150,
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "1zJv_Yad3UVEAh-AW4Y6ZCQNlh3T4j4VT",
            "mode": "list",
            "cachedResultName": "Nosta_downloads",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1zJv_Yad3UVEAh-AW4Y6ZCQNlh3T4j4VT"
          }
        },
        "options": {
          "fields": [
            "id",
            "name",
            "webViewLink",
            "mimeType",
            "*"
          ]
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -3180,
        340
      ],
      "id": "c3e2ccfd-949f-43ba-b994-e9a8b21d48e0",
      "name": "Google Drive",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "3NDSmdEGS6sRpjvp",
          "name": "Google Drive account 3"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id_source }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -1500,
        360
      ],
      "id": "26f60a11-3e88-4cbb-8532-5a52c23737ba",
      "name": "Google Drive3",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "3NDSmdEGS6sRpjvp",
          "name": "Google Drive account 3"
        }
      }
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "=nostasite_meta",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "title": "={{ $json.file_title }}",
            "url": "={{ $json.file_url }}",
            "id_source": "={{ $json.file_id }}",
            "last_modified_date": "={{ $json.last_modified_date }}"
          },
          "matchingColumns": [
            "id_source"
          ],
          "schema": [
            {
              "id": "id_source",
              "displayName": "id_source",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "url",
              "displayName": "url",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "last_modified_date",
              "displayName": "last_modified_date",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1740,
        360
      ],
      "id": "ca073cea-3e93-47d5-9805-df1e6586f426",
      "name": "Insert Document Metadata",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "Lbgzg53k1R1pwGeo",
          "name": "Postgres account 4 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "tableName": "n8n_chat"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -880,
        -420
      ],
      "id": "2b346278-b713-49c8-a5dd-d400b359bdf1",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "aU6gEnNNOwoNT9SD",
          "name": "Postgres Nostar"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "documents",
        "toolDescription": "Use RAG to look up information in the knowledgebase.",
        "tableName": {
          "__rl": true,
          "value": "nosta_siteembed",
          "mode": "list",
          "cachedResultName": "nosta_siteembed"
        },
        "topK": 5,
        "options": {
          "queryName": "match_nosta_siteembed"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        -340,
        -400
      ],
      "id": "9894ffb4-30f8-4192-ab80-7c8c22078f21",
      "name": "Supabase Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "8hlgdRRQJS9sMYJ1",
          "name": "Supabase account 3 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Web Search tool only SAP websites",
        "method": "POST",
        "url": "https://api.tavily.com/search",
        "sendHeaders": true,
        "parametersHeaders": {
          "values": [
            {
              "name": "Authorization",
              "valueProvider": "fieldValue",
              "value": "Bearer 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"
            },
            {
              "name": "Content-Type",
              "valueProvider": "fieldValue",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"query\": \"{query}\",\n  \"topic\": \"general\",\n  \"search_depth\": \"advanced\",\n  \"max_results\": 20,\n  \"include_answer\": true,\n  \"include_raw_content\": false,\n  \"include_images\": false,\n  \"include_image_descriptions\": false,\n  \"include_domains\": [\"https://help.sap.com/docs/\",\"https://community.sap.com/\"],\n  \"exclude_domains\": []\n}",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "query",
              "description": "Search Querry",
              "type": "string"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        220,
        -740
      ],
      "id": "aea21beb-dd6e-44fb-9e62-10311ed51252",
      "name": "Web Search 2"
    },
    {
      "parameters": {
        "toolDescription": "Web Search tool excluding SAP websites",
        "method": "POST",
        "url": "https://api.tavily.com/search",
        "sendHeaders": true,
        "parametersHeaders": {
          "values": [
            {
              "name": "Authorization",
              "valueProvider": "fieldValue",
              "value": "Bearer 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"
            },
            {
              "name": "Content-Type",
              "valueProvider": "fieldValue",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"query\": \"{query}\",\n  \"topic\": \"general\",\n  \"search_depth\": \"advanced\",\n  \"max_results\": 20,\n  \"include_answer\": true,\n  \"include_raw_content\": false,\n  \"include_images\": false,\n  \"include_image_descriptions\": false,\n  \"include_domains\": [],\n  \"exclude_domains\": [\"https://help.sap.com/docs/\",\"https://community.sap.com/\"]\n}",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "query",
              "description": "Search Querry",
              "type": "string"
            }
          ]
        },
        "optimizeResponse": true
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        -100,
        -560
      ],
      "id": "896bfea1-cd9a-4b6f-8c5d-f3d68c3f5b42",
      "name": "Web Search 1"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool to fetch all available documents, including the table schema if the file is a CSV or Excel file.",
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "nostasite_meta",
          "mode": "list",
          "cachedResultName": "nostasite_meta"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        -640,
        -380
      ],
      "id": "361d310c-f908-440c-b4fe-66759a5c1745",
      "name": "List Documents",
      "credentials": {
        "postgres": {
          "id": "Lbgzg53k1R1pwGeo",
          "name": "Postgres account 4 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "model": "mistral-small-latest",
        "options": {
          "temperature": 0.4
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [
        -1040,
        -460
      ],
      "id": "327a93af-d260-4d95-892e-3ce888329408",
      "name": "Mistral Cloud Chat Model",
      "credentials": {
        "mistralCloudApi": {
          "id": "uXnHG2tXx33Gkexl",
          "name": "Mistral Cloud account(dbt)"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -1180,
        -820
      ],
      "id": "7c1a4a65-06da-4dce-9504-e7ff7b1421b8",
      "name": "When chat message received",
      "webhookId": "3c61c08a-9714-43dd-96d8-608b30397eeb"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9a9a245e-f1a1-4282-bb02-a81ffe629f0f",
              "name": "chatInput",
              "value": "={{ $json?.chatInput || $json.body.chatInput }}",
              "type": "string"
            },
            {
              "id": "b80831d8-c653-4203-8706-adedfdb98f77",
              "name": "sessionId",
              "value": "={{ $json?.sessionId || $json.body.sessionId}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "957bbc1a-d20d-4b6b-9da5-b5b1f48cee07",
      "name": "Edit Fields1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -820,
        -820
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsMistralCloud",
      "typeVersion": 1,
      "position": [
        -320,
        -260
      ],
      "id": "9a0ff689-442b-46c9-9c43-8a493f0568ef",
      "name": "Embeddings Mistral Cloud1",
      "credentials": {
        "mistralCloudApi": {
          "id": "uXnHG2tXx33Gkexl",
          "name": "Mistral Cloud account(dbt)"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "options": {
          "systemMessage": "=AI Support Agent Prompt\nPersona\nYou are a helpful, intelligent AI support SD agent and are a proactive chat agent. Lead the conversation by asking open-ended questions and offering suggestions. Don’t wait for the user to guide the chat — keep it moving with helpful, friendly prompts. Anticipate needs, follow up thoughtfully, and make the user feel supported throughout.\n\nKnowledge Access Instructions\nPrimary Source: For every user question, always use the Supabase store (nosta_siteembed) as the primary source.\n\nInitial Search: Begin each query by searching only in Supabase (nosta_siteembed).\n\nSupabase Found: If relevant information is found in Supabase:\n\nRespond in English.\n\nProvide the textual information first.\n\n\n\nYou must cite the internal document name and provide the internal document URL.\n\nExample:\n\"For your reference, this information is based on the internal documentation related to Delivery Schedule with EDI Call-Off in SAP systems (Anwenderdoku_Lieferplan mit Abruf EDI). For more detailed guidance, you can access the internal document using the following \n\nSupabase Not Found: If no relevant information is found in Supabase, respond to the user with:\n\n\"The information you requested is not available in our internal documentation. Would you like me to do a Web search?\"\n\nWeb Search Permission:\n\nDo NOT use web search tools automatically.\n\nWait for the user's explicit confirmation (e.g., \"Yes\", \"Okay\", \"Please do\", etc.).\n\nPerforming a Web Search:\n\nOnly after receiving user permission, perform a web search.\n\nUse both web search 1 and web search 2 tools.\n\nQueries must be a single string in English.\n\nClearly state that the information is from an external source.\n\nExample:\n\"This information comes from an external source (e.g., from a relevant website)...\"\n\nImportant Rules & Logic\nSearch Scope: After getting permission for a web search, use it only for the immediate response. Return to using Supabase for all subsequent queries unless the user explicitly asks for external help again.\n\nNo Data Found: If no data is found in Supabase or the web, respond with:\n\n\"At the moment, there is no information available to fully address this request based on current internal and external sources.\"\n\n\nFormat & Style Guidelines\nLanguage: All Supabase queries and all user responses must be in English.\n\nTone: Responses must be Professional, Clear, and helpful. They should be as concise as possible while remaining precise and well-structured.\n\nInstructional Format: For guide or instruction-based responses, only use the following format:\n\nStep-by-Step Guide\n\nThings To Consider\n\nFurther Understanding\n\nUnder \"Further Understanding,\" do not ask for related questions. Instead, provide two bullet points suggesting what topic to explore next based on the user's question.\n\nThings to Consider/Important Details/Common Pitfalls\nYou should actively work to avoid common errors and pay close attention to important details, ensuring none are overlooked while performing the task.",
          "returnIntermediateSteps": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -600,
        -820
      ],
      "id": "703de884-bc93-4bee-820c-9eed161709d7",
      "name": "nosta site bot"
    }
  ],
  "origin": "n8n",
  "pinData": {},
  "repo": {
    "owner": "AnushaPriya2",
    "name": "n8n-workflow-backups"
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-09-11T11:36:47.000Z",
  "versionId": "fa310327-bec4-4531-a135-ba45cdc31af9"
}