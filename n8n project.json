{
  "active": false,
  "connections": {
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Download File": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Created": {
      "main": [
        [
          {
            "node": "Postgres1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Updated": {
      "main": [
        [
          {
            "node": "Postgres1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Document Text": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set File ID": {
      "main": [
        [
          {
            "node": "Insert Document Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract PDF Text": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Summarize": {
      "main": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Extract PDF Text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from CSV",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract Document Text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from CSV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert into Supabase Vectorstore": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from CSV": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          },
          {
            "node": "Insert Table Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Set File ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Document Metadata": {
      "main": [
        [
          {
            "node": "Download File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Table Rows": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Insert Table Rows",
            "type": "main",
            "index": 0
          },
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Combine Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Text": {
      "main": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from Excel": {
      "main": [
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download File1": {
      "main": [
        [
          {
            "node": "Extract from Excel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items2": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          },
          {
            "node": "Insert Table Rows",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "RAG AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Documents": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get File Contents": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Query Document Rows": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store1": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI2": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Generate a chart": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Send Email": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Calculator": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Create Document Metadata Table": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Documents Table and Match Function": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Document Rows Table (for Tabular Data)": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RAG AI Agent": {
      "main": [
        []
      ]
    },
    "Google Drive": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-04-16T13:35:55.356Z",
  "id": "sEceEDXbioexvB8Y",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "n8n project",
  "nodes": [
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.data || $json.text || $json.concatenated_data }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "=file_id",
                "value": "={{ $('Set File ID').first().json.file_id }}"
              },
              {
                "name": "file_title",
                "value": "={{ $('Set File ID').first().json.file_title }}"
              }
            ]
          }
        }
      },
      "id": "c1f771c8-291d-41c9-9579-e344e4c927ea",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        1700,
        1140
      ]
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "68d321f3-548e-4b2c-9446-c4e9aca0fa47",
      "name": "Embeddings OpenAI1",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        1440,
        1200
      ],
      "credentials": {
        "openAiApi": {
          "id": "jpK6UkKnpLM9LJPk",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Set File ID').item.json.file_id }}",
          "mode": "id"
        },
        "options": {
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "text/plain"
            }
          }
        }
      },
      "id": "f9632eae-a5cc-481d-bd6e-7858d4804f14",
      "name": "Download File",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -780,
        640
      ],
      "executeOnce": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "GK4eEnpXUcuMg5Zb",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1wEasiH1EZ2lfx4pOYF4s6NC-Lt0YKvYo",
          "mode": "list",
          "cachedResultName": "ai",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1wEasiH1EZ2lfx4pOYF4s6NC-Lt0YKvYo"
        },
        "event": "fileCreated",
        "options": {}
      },
      "id": "2097a24d-88d4-423d-b773-c2420ef7112f",
      "name": "File Created",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        -2240,
        560
      ],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "GK4eEnpXUcuMg5Zb",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1wEasiH1EZ2lfx4pOYF4s6NC-Lt0YKvYo",
          "mode": "list",
          "cachedResultName": "ai",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1wEasiH1EZ2lfx4pOYF4s6NC-Lt0YKvYo"
        },
        "event": "fileUpdated",
        "options": {}
      },
      "id": "5e519303-aaaa-4fd5-b534-7aee62ba797e",
      "name": "File Updated",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        -2240,
        740
      ],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "GK4eEnpXUcuMg5Zb",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "id": "be41e55e-0fc3-438c-afaf-3b057109d1aa",
      "name": "Extract Document Text",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        160,
        1040
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "10646eae-ae46-4327-a4dc-9987c2d76173",
              "name": "file_id",
              "value": "={{ $('Google Drive').item.json.id }}",
              "type": "string"
            },
            {
              "id": "f4536df5-d0b1-4392-bf17-b8137fb31a44",
              "name": "file_type",
              "value": "={{ $('Google Drive').item.json.mimeType }}",
              "type": "string"
            },
            {
              "id": "77d782de-169d-4a46-8a8e-a3831c04d90f",
              "name": "file_title",
              "value": "={{ $('Google Drive').item.json.name }}",
              "type": "string"
            },
            {
              "id": "9bde4d7f-e4f3-4ebd-9338-dce1350f9eab",
              "name": "file_url",
              "value": "={{ $('Google Drive').item.json.webViewLink }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "36306960-0bc9-4ed0-9384-4ab30f37b2a9",
      "name": "Set File ID",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1180,
        640
      ]
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "id": "7361750f-b7f9-420d-9e6e-f97d83427d6b",
      "name": "Extract PDF Text",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        160,
        1260
      ]
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "897b746c-d209-4bb7-afd5-5f340c783085",
      "name": "Aggregate",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1060,
        640
      ]
    },
    {
      "parameters": {},
      "id": "113c9d07-7d46-4529-9033-453640a67f80",
      "name": "Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        1600,
        1260
      ]
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "2b2c65bb-6923-4b6e-ba31-3551f738f37c",
      "name": "Summarize",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        1300,
        640
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "application/pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "2ae7faa7-a936-4621-a680-60c512163034",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "fc193b06-363b-4699-a97d-e5a850138b0e",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "=application/vnd.google-apps.spreadsheet",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "b69f5605-0179-4b02-9a32-e34bb085f82d",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "application/vnd.google-apps.document",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "09985def-9067-445f-a975-2ab13a8bfb55",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "text/csv",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": 3
        }
      },
      "id": "93f1c288-1fbf-4967-8c91-0dfd0bbf98fa",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -540,
        600
      ]
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "n8n_test",
          "mode": "list",
          "cachedResultName": "n8n_test"
        },
        "options": {
          "queryName": "match5_documents"
        }
      },
      "id": "020d8948-9cd9-4b00-9d3d-1fe11895114f",
      "name": "Insert into Supabase Vectorstore",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        1780,
        800
      ],
      "credentials": {
        "supabaseApi": {
          "id": "IOh0LUl8h2DbmqBS",
          "name": "Supabase Ayan"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        260,
        840
      ],
      "id": "0a0f09c1-3b21-4107-a9ac-ab88662d80b8",
      "name": "Extract from CSV"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1400,
        620
      ],
      "id": "00427ef3-95d4-4a48-b1cb-4e69002f27f4",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "n8n_metadata",
          "mode": "list",
          "cachedResultName": "n8n_metadata"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('Set File ID').item.json.file_id }}",
            "title": "={{ $('Set File ID').item.json.file_title }}",
            "url": "={{ $('Set File ID').item.json.file_url }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "schema",
              "displayName": "schema",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -980,
        640
      ],
      "id": "3504690b-7759-4397-9992-de5818e2da09",
      "name": "Insert Document Metadata",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "Qer75M1RfykhlGmw",
          "name": "Postgres Ayan"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "n8n_rows",
          "mode": "list",
          "cachedResultName": "n8n_rows"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "dataset_id": "={{ $('Set File ID').first().json.file_id }}",
            "row_data3": "={{ $json.toJsonString().replaceAll(/'/g, \"''\") }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "dataset_id",
              "displayName": "dataset_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "row_data3",
              "displayName": "row_data3",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1060,
        820
      ],
      "id": "4fee3a61-6b86-4e94-ac07-b7632cfed056",
      "name": "Insert Table Rows",
      "alwaysOutputData": false,
      "credentials": {
        "postgres": {
          "id": "Qer75M1RfykhlGmw",
          "name": "Postgres Ayan"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1300,
        820
      ],
      "id": "9b5c31f2-07ed-4980-972d-0147e77ac547",
      "name": "Switch1"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import io\nimport zipfile\nimport xml.etree.ElementTree as ET\nimport base64\n\ndef get_sheet_names_from_xlsx_bytes(buffer_bytes):\n    \"\"\"\n    Accepts raw XLSX bytes and returns a list of sheet names.\n    \"\"\"\n    with zipfile.ZipFile(io.BytesIO(buffer_bytes), \"r\") as archive:\n        xml_content = archive.read(\"xl/workbook.xml\")\n        root = ET.fromstring(xml_content)\n        # Default namespace for XLSX workbook XML\n        ns = {\"ns\": \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"}\n        sheets_elem = root.find(\"ns:sheets\", ns)\n        return [\n            sheet.attrib[\"name\"]\n            for sheet in sheets_elem.findall(\"ns:sheet\", ns)\n        ]\n\n# Entry point for n8n Python node\n# items[0].json.data should be a Base64‑encoded string of the XLSX file\nb64_str = items[0][\"json\"][\"data\"]\nraw_bytes = base64.b64decode(b64_str)\n\n# Retrieve sheet names\nsheet_names = get_sheet_names_from_xlsx_bytes(raw_bytes)\n\n# Return each sheet name as a separate item\nreturn [{\"json\": {\"sheetName\": name}} for name in sheet_names]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -60,
        420
      ],
      "id": "9a3e908c-164f-4159-a3f7-0c83b1dd7e00",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "const results = [];\n\nitems.forEach(item => {\n  let content = item.json.data || item.json.text || '';\n  content = content.trim();\n  if (!content) return;\n\n  // Check if it's tabular (we assume first line has multiple tab-separated values)\n  const lines = content.split(/\\r?\\n/).filter(l => l.trim() !== '');\n  const firstLine = lines[0];\n  let isTabular = 0;\n\n  if (firstLine.includes('\\t')) {\n    isTabular = 10;\n  } else if (lines.length >= 3) {\n    if (lines[1].split(' ').length === lines[2].split(' ').length) {\n      isTabular = 20;\n    }\n  }\n\n  if (isTabular) {\n    const del = isTabular === 10 ? '\\t' : ' ';\n    const headers = firstLine.split(del).map(h => h.trim());\n    const dataLines = lines.slice(1);\n\n    const parsed = dataLines.map(line => {\n      const values = line.split(del);\n      const obj = {};\n      headers.forEach((header, idx) => {\n        obj[header] = values[idx]?.trim() || null;\n      });\n      obj.type = 'table'; // Add type tag\n      return { json: obj };\n    });\n\n    results.push(...parsed);\n  } else {\n    const parsed = lines.map(line => {\n      return { json: { text: line, type: 'text' } };\n    });\n\n    results.push(...parsed);\n  }\n});\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        420,
        1160
      ],
      "id": "c41dbd82-21ba-43ea-886b-24ef4d6d0925",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "1fbe04f7-e163-440a-adb6-ca0ae60c2175",
              "leftValue": "={{ $json.type }}",
              "rightValue": "table",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        640,
        1160
      ],
      "id": "9b4b133c-1226-47e9-913e-5e56f2c6dc7b",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "let combinedText = items.map(item => item.json.text).join(' ');\n\nreturn [\n  {\n    json: {\n      text: combinedText\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        860,
        1180
      ],
      "id": "c0f58682-501e-4c9c-b8da-8e28b0e18595",
      "name": "Combine Text"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {
          "sheetName": "={{ $('Loop Over Items2').item.json.sheetName }}"
        }
      },
      "id": "aa2178c1-4410-4410-894b-cce6559ab3f7",
      "name": "Extract from Excel",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        760,
        340
      ]
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Set File ID').item.json.file_id }}",
          "mode": "id"
        },
        "options": {
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "text/plain"
            }
          }
        }
      },
      "id": "b6e5989e-ee8d-4861-aeb9-3f6e8fd37fd0",
      "name": "Download File1",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        540,
        340
      ],
      "executeOnce": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "GK4eEnpXUcuMg5Zb",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        200,
        380
      ],
      "id": "5a562e94-4d9a-44b6-af3d-9b152d09356a",
      "name": "Loop Over Items2"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "7a63cf17-4b2e-4636-9d15-030b2310b34f",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -2060,
        1400
      ],
      "credentials": {
        "openAiApi": {
          "id": "jpK6UkKnpLM9LJPk",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9a9a245e-f1a1-4282-bb02-a81ffe629f0f",
              "name": "chatInput",
              "value": "={{ $json?.chatInput || $json.body.chatInput }}",
              "type": "string"
            },
            {
              "id": "b80831d8-c653-4203-8706-adedfdb98f77",
              "name": "sessionId",
              "value": "={{ $json?.sessionId || $json.body.sessionId}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "fedddab3-0f59-4ea7-b3c5-0afeb8709946",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1860,
        1180
      ]
    },
    {
      "parameters": {
        "public": true,
        "options": {}
      },
      "id": "90e6b7be-fd58-4dd6-81cf-a515ef3eb488",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -2120,
        1180
      ],
      "webhookId": "e104e40e-6134-4825-a6f0-8a646d882662"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "options": {
          "systemMessage": "=You are a personal assistant who helps answer questions from a corpus of documents. These documents may be text-based (TXT, DOCs, extracted PDFs, etc.) or tabular (CSVs, Excel files).\n\nYou have access to the following tools:\n\n1.RAG on documents stored in the n8n_test table\n\n2.Document metadata lookup via the n8n_metadata table\n\n3.Full text extraction from supported files\n\n4.Query Document Rows (via the n8n_rows table) for numerical operations only\n\n5.Calculator tool for all mathematical computation\n\n## Critical Routing Rule\nStrictly follow this separation of concerns:\n\nIf the user input asks for summary, description, or details about a specific article or product (e.g., “give me a breakdown of prices for Article Number 645…” or “what is the net price for Product A?”), you must use Supabase (n8n_test).\n→ Never use the Query Document Rows tool in this case.\n\nIf the user input requests any operation that involves logic or mathematics — including sum, average, total, percentage, multiplication, division, comparisons, or sorting — then and only then, you should:\n\nUse the Query Document Rows tool to retrieve cleaned numeric data from the row_data3 JSONB column.\n\nSend that data to the Calculator tool to perform the actual computation.\n\n→ Do not use the n8n_test table for calculations.\n\nWhen using Query Document Rows:\nAccess tabular data from the n8n_rows table.\n\nUse proper JSONB access: row_data3->>'Feb 25', row_data3->>'Article Number', etc.\n\nClean numeric values using NULLIF(NULLIF(..., ''), '-') to remove blanks and dashes.\n\nNever perform calculations in the SQL itself — only retrieve raw data.\n\nPass all numerical logic to the Calculator tool.\n\n## When using Supabase (n8n_test):\nUse it to:\n\nLook up product or article summaries\n\nRetrieve price lists or descriptive fields\n\nExtract detailed raw values (not for computation)\n\nNever use this table for logic, math, or comparisons.\n\n## General Behavior\nAlways start with RAG for general or document-based queries.\n\nUse Supabase (n8n_test) for lookup or content extraction.\n\nUse Query Document Rows + Calculator only for logic/calculation-driven tasks.\n\nBe precise and avoid mixing tools.\n\nDo not hallucinate or make assumptions.\n\n## Email Assistant Instructions\nIf the user requests a summary and chart:\n\nIf Account Name is given:\n→ Look up email from Supabase, generate summary/chart, send via email.\n\nIf email address is directly provided:\n→ Compose and send the email with summary and attached chart.\n\nIf no email is found or provided:\n→ Ask the user for clarification.\n\nAll emails must be composed in professional HTML format and signed:\n\nKind regards,<br>Anusha\n\n## Final Reminder\n Never use Query Document Rows for descriptions, summaries, or detail queries.\n Use it only when mathematical or logical operations are explicitly requested.\n\nImportant: When handling a request, perform as many successive queries as needed to ensure your final response fully satisfies the original question; if you cannot locate the required data, repeat your query using single-condition filters until you retrieve what’s needed."
        }
      },
      "id": "be8889c7-1cc4-462c-a4bf-19c98e2cab62",
      "name": "RAG AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        -1640,
        1180
      ]
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool to fetch all available documents, including the table schema if the file is a CSV or Excel file.",
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "n8n_metadata",
          "mode": "list",
          "cachedResultName": "n8n_metadata"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        -1620,
        1400
      ],
      "id": "27eb3a85-f892-407e-86c5-da005edeecfb",
      "name": "List Documents",
      "credentials": {
        "postgres": {
          "id": "Qer75M1RfykhlGmw",
          "name": "Postgres Ayan"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Given a file ID, fetches the text from the document.",
        "operation": "executeQuery",
        "query": "SELECT \n    string_agg(content, ' ') as document_text\nFROM n8n_test\n  WHERE metadata->>'file_id' = $1\nGROUP BY metadata->>'file_id';",
        "options": {
          "queryReplacement": "={{ $fromAI('file_id') }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        -1440,
        1420
      ],
      "id": "690a4f2f-215f-467c-86d2-4cb3566a6dd0",
      "name": "Get File Contents",
      "credentials": {
        "postgres": {
          "id": "Qer75M1RfykhlGmw",
          "name": "Postgres Ayan"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "=Run a SQL query to retrieve raw data only from the n8n_rows table. This tool should be used strictly to fetch data from the row_data3 JSONB field — no calculations or aggregations should be performed here.\n\n### Scenario 1: Files with keys like \"Jan 25\", \"Feb 25\", \"Mar 25\", \"Article Number\"\nThese files use the following keys inside row_data3:\n\n\"Jan 25\", \"Feb 25\", \"Mar 25\" (month sales)\n\n\"Article Number\" (article identifier)\n\nTo access these fields:\n\nrow_data3->>'Jan 25'\n\nrow_data3->>'Feb 25'\n\nrow_data3->>'Mar 25'\n\nrow_data3->>'Article Number'\n\nTo clean values: Use NULLIF(NULLIF(field, ''), '-') to remove blanks/dashes.\n\n# Example Query Use Case (not actual SQL):\n\n“Return cleaned Feb 25 values for Article Number 1 and 2”\n\n### Scenario 2: Files with keys like \"jan\", \"feb\", \"march\", \"april\", \"Article_number\"\nThese files use lowercase field names:\n\n\"jan\", \"feb\", \"march\", \"april\" (month sales)\n\n\"Article_number\" (article identifier)\n\nTo access these fields:\n\nrow_data3->>'jan'\n\nrow_data3->>'feb'\n\nrow_data3->>'march'\n\nrow_data3->>'april'\n\nrow_data3->>'Article_number'\n\nTo clean values: Use NULLIF(NULLIF(row_data3->>'feb', ''), '-') AS feb_clean\n\n# Example Query Use Case:\n\n“Give me summary for Article_number 41”\n\n## Do not perform any calculations (SUM, AVG, etc.) in this tool.\nYour job is to:\n\nExtract raw data (as strings) using JSONB access\n\nClean values using NULLIF(...)\n\nPass the cleaned numbers to the Calculator tool for operations like sum, average, total, percentage, etc.\n\n## Summary Query Example (Scenario 2)\nIf the user asks:\n“summary for Article_number 2”\n\nYou should fetch:\n\n\"jan\", \"feb\", \"march\", \"april\", and \"Article_number\"\n\nReturn them as-is — no calculations needed.\n",
        "operation": "executeQuery",
        "query": "{{ $fromAI('sql_query') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        -1300,
        1400
      ],
      "id": "b8ec510a-c402-47e9-921e-928077abbd55",
      "name": "Query Document Rows",
      "credentials": {
        "postgres": {
          "id": "Qer75M1RfykhlGmw",
          "name": "Postgres Ayan"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "documents",
        "toolDescription": "Use RAG to look up information in the knowledgebase.",
        "tableName": {
          "__rl": true,
          "value": "n8n_test",
          "mode": "list",
          "cachedResultName": "n8n_test"
        },
        "topK": 20,
        "options": {
          "queryName": "match5_documents"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        -660,
        1200
      ],
      "id": "8d939552-a535-4929-ba9f-dcf76182f802",
      "name": "Supabase Vector Store1",
      "credentials": {
        "supabaseApi": {
          "id": "IOh0LUl8h2DbmqBS",
          "name": "Supabase Ayan"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        -560,
        1380
      ],
      "id": "f257154f-f9bc-4b7c-925d-a1629a327a54",
      "name": "Embeddings OpenAI2",
      "credentials": {
        "openAiApi": {
          "id": "jpK6UkKnpLM9LJPk",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "name": "generate_a_chart",
        "description": "Call this tool whenever you need to generate a chart.",
        "workflowId": "=fEFBpNMQJFRMN7f1",
        "specifyInputSchema": true,
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"chart\": {\n      \"type\": \"object\",\n      \"description\": \"A JSON object defining the chart to generate\",\n      \"properties\": {\n        \"type\": {\n          \"type\": \"string\",\n          \"description\": \"The type of chart (e.g., bar, line, pie)\"\n        },\n        \"data\": {\n          \"type\": \"object\",\n          \"description\": \"The data for the chart\",\n          \"properties\": {\n            \"labels\": {\n              \"type\": \"array\",\n              \"items\": { \"type\": \"string\" },\n              \"description\": \"Labels for the data points\"\n            },\n            \"datasets\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"label\": {\n                    \"type\": \"string\",\n                    \"description\": \"Label for the dataset\"\n                  },\n                  \"data\": {\n                    \"type\": \"array\",\n                    \"items\": { \"type\": \"number\" },\n                    \"description\": \"Values for the dataset\"\n                  },\n                  \"backgroundColor\": {\n                    \"type\": \"array\",\n                    \"items\": { \"type\": \"string\" },\n                    \"description\": \"Background colors for the bars\"\n                  },\n                  \"borderColor\": {\n                    \"type\": \"array\",\n                    \"items\": { \"type\": \"string\" },\n                    \"description\": \"Border colors for the bars\"\n                  },\n                  \"borderWidth\": {\n                    \"type\": \"number\",\n                    \"description\": \"Border width of the bars\"\n                  }\n                }\n              },\n              \"description\": \"Array of datasets for the chart\"\n            }\n          }\n        },\n        \"options\": {\n          \"type\": \"object\",\n          \"description\": \"Configuration options for the chart\",\n          \"properties\": {\n            \"scales\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"yAxes\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"ticks\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"beginAtZero\": { \"type\": \"boolean\" }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            },\n            \"title\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"display\": { \"type\": \"boolean\" },\n                \"text\": { \"type\": \"string\" }\n              },\n              \"description\": \"Title settings for the chart\"\n            }\n          }\n        }\n      }\n    }\n  }\n}"
      },
      "id": "87a2b2f0-631a-4c6f-92ac-40896517a47c",
      "name": "Generate a chart",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        -880,
        1360
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "sendTo": "={{ $fromAI(\"emailAddress\") }}",
        "subject": "={{ $fromAI(\"subject\") }}",
        "message": "={{ $fromAI(\"emailBody\") }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        -1040,
        1380
      ],
      "id": "183717ad-c20c-474a-acda-fe359a92360b",
      "name": "Send Email",
      "webhookId": "86c8c4b1-13bb-4ebe-acb9-30e1d7082d55",
      "credentials": {
        "gmailOAuth2": {
          "id": "k7970AczVaU0unYi",
          "name": "Gmail account 2"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        -1180,
        1400
      ],
      "id": "efd7bd62-cd24-4880-846f-d64b3a4c67b4",
      "name": "Calculator"
    },
    {
      "parameters": {
        "tableName": "n8n_chat"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -1800,
        1400
      ],
      "id": "a285953c-341d-4cad-801e-da0bda22b549",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "Qer75M1RfykhlGmw",
          "name": "Postgres Ayan"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE n8n_metadata (\n    id TEXT PRIMARY KEY,\n    title TEXT,\n    url TEXT,\n    created_at TIMESTAMP DEFAULT NOW(),\n    schema TEXT\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -480,
        -100
      ],
      "id": "37c4d0b3-24d1-4085-8203-425b76beae13",
      "name": "Create Document Metadata Table",
      "credentials": {
        "postgres": {
          "id": "Qer75M1RfykhlGmw",
          "name": "Postgres Ayan"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE n8n_rows (\n    id SERIAL PRIMARY KEY,\n    dataset_id TEXT REFERENCES n8n_metadata(id),\n    row_data3 JSONB  -- Store the actual row data\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -480,
        40
      ],
      "id": "839d7e56-0d33-4d99-857e-e554f257a996",
      "name": "Create Document Rows Table (for Tabular Data)",
      "credentials": {
        "postgres": {
          "id": "Qer75M1RfykhlGmw",
          "name": "Postgres Ayan"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Create a table to store your documents\ncreate table n8n_test (\n  id bigserial primary key,\n  content text, -- corresponds to Document.pageContent\n  metadata jsonb, -- corresponds to Document.metadata\n  embedding vector(1536) -- 1536 works for OpenAI embeddings, change if needed\n);\n\n-- Create a function to search for documents\ncreate function match5_documents (\n  query_embedding vector(1536),\n  match_count int default null,\n  filter jsonb DEFAULT '{}'\n) returns table (\n  id bigint,\n  content text,\n  metadata jsonb,\n  similarity float\n)\nlanguage plpgsql\nas $$\n#variable_conflict use_column\nbegin\n  return query\n  select\n    id,\n    content,\n    metadata,\n    1 - (n8n_test.embedding <=> query_embedding) as similarity\n  from n8n_test\n  where metadata @> filter\n  order by n8n_test.embedding <=> query_embedding\n  limit match_count;\nend;\n$$;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -480,
        -280
      ],
      "id": "69428312-b0e6-4ded-978f-532a6244196e",
      "name": "Create Documents Table and Match Function",
      "credentials": {
        "postgres": {
          "id": "Qer75M1RfykhlGmw",
          "name": "Postgres Ayan"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -200,
        -140
      ],
      "id": "1eb99a03-6ad4-4483-84c9-71abde225412",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -260,
        420
      ],
      "id": "936f272f-be37-4298-b46d-721f8a074497",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT table_name\nFROM information_schema.tables\nWHERE table_schema = 'public' and table_name like 'n8n%'\norder by length(table_name) Asc;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1880,
        40
      ],
      "id": "669c595f-e685-4e95-82e2-d10c334cb89b",
      "name": "Postgres1",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "Qer75M1RfykhlGmw",
          "name": "Postgres Ayan"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1680,
        40
      ],
      "id": "dca110bf-a8f1-4640-8c4b-d72d4213abb6",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "operation": "deleteTable",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "={{ $json.table_name }}",
          "mode": "name"
        },
        "restartSequences": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1500,
        160
      ],
      "id": "d8a8981f-0037-4c89-b706-93d866795139",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "Qer75M1RfykhlGmw",
          "name": "Postgres Ayan"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "searchMethod": "query",
        "returnAll": true,
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "1wEasiH1EZ2lfx4pOYF4s6NC-Lt0YKvYo",
            "mode": "list",
            "cachedResultName": "ai",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1wEasiH1EZ2lfx4pOYF4s6NC-Lt0YKvYo"
          }
        },
        "options": {
          "fields": [
            "id",
            "mimeType",
            "name",
            "webViewLink"
          ]
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -1700,
        620
      ],
      "id": "7c6b3dd0-23c9-4a7f-a44e-8b9685cddac1",
      "name": "Google Drive",
      "executeOnce": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "GK4eEnpXUcuMg5Zb",
          "name": "Google Drive account"
        }
      }
    }
  ],
  "origin": "n8n",
  "pinData": {},
  "repo": {
    "owner": "AnushaPriya2",
    "name": "n8n-workflow-backups"
  },
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": {
    "node:File Created": {
      "lastTimeChecked": "2025-04-23T21:48:41Z"
    },
    "node:File Updated": {
      "lastTimeChecked": "2025-04-23T21:48:47Z"
    }
  },
  "tags": [],
  "triggerCount": 4,
  "updatedAt": "2025-05-17T08:18:52.000Z",
  "versionId": "31e9d3fd-379e-4335-a354-feb904cab602"
}