{
  "active": false,
  "connections": {
    "Download File": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Set File ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Insert into Supabase Vectorstore": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Document Metadata": {
      "main": [
        [
          {
            "node": "Download File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set File ID": {
      "main": [
        [
          {
            "node": "Insert Document Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "S31",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "S31": {
      "main": [
        [
          {
            "node": "S32",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "S32": {
      "main": [
        [
          {
            "node": "Google Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission1": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "Postgres1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Download File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "S33",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-05-22T13:27:33.021Z",
  "id": "7Kc3lYKWmmLL2iuC",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "#01 - NOSTA SD Agent - Document Loader - Production",
  "nodes": [
    {
      "parameters": {
        "content": "• On form submission this workflow deletes old or previously stored data from an existing table in the Supabase database.\n\n• By clearing out outdated entries, it ensures that the table is ready to receive and store new, updated information without altering the table’s structure or schema.\n\n• It also facilitate the transfer of both data and metadata from multiple individual documents into the Supabase database.\n\n\n• It systematically collects information from various sources, organizes it appropriately, and inserts it into the corresponding tables within Supabase.\n\n• This ensures centralized data storage, improved accessibility, and streamlined management of structured and descriptive information originating from diverse document formats.\n",
        "height": 380,
        "width": 440,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2580,
        540
      ],
      "typeVersion": 1,
      "id": "62f3fd62-c62d-4a72-95ae-2c8fe5a6d043",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "id": "cc1a2acc-796e-41cf-9d62-94dddd86b2c4",
      "name": "Download File",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -1060,
        700
      ],
      "executeOnce": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "GK4eEnpXUcuMg5Zb",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://universal-file-to-text-extractor.vercel.app/extract",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "mode",
              "value": "single"
            },
            {
              "name": "output_type",
              "value": "jsonl"
            },
            {
              "parameterType": "formBinaryData",
              "name": "files",
              "inputDataFieldName": "data"
            },
            {
              "name": "include_images",
              "value": "true"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -880,
        700
      ],
      "id": "2672a5d1-d9c1-484b-924f-bfb381478d46",
      "name": "HTTP Request",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "searchMethod": "query",
        "returnAll": true,
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "1WpO8qir_UUWVna9WOY_Vj_RVbwBrWawY",
            "mode": "list",
            "cachedResultName": "Customer Documentation",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1WpO8qir_UUWVna9WOY_Vj_RVbwBrWawY"
          }
        },
        "options": {
          "fields": [
            "id",
            "mimeType",
            "name",
            "webViewLink"
          ]
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -1940,
        680
      ],
      "id": "713da619-7b93-4b5e-9cb3-4af7347b4095",
      "name": "Google Drive",
      "executeOnce": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "GK4eEnpXUcuMg5Zb",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1720,
        680
      ],
      "id": "2112a09e-54c2-4cb1-b96b-1a75e01304cd",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.content.parseJson().pageContent.toJsonString() }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "source",
                "value": "={{ $json.content.parseJson().metadata.source }}"
              },
              {
                "name": "blobType",
                "value": "application/jsonb"
              },
              {
                "name": "loc",
                "value": "={{ $json.content.parseJson().metadata.loc }}"
              },
              {
                "name": "source_metadata_id",
                "value": "={{ $json.content.parseJson().metadata.source_metadata_id }}"
              }
            ]
          }
        }
      },
      "id": "bea2bcca-7876-44a1-8bfc-5095357fb2ab",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        380,
        900
      ]
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "3ba75819-a306-4aa0-8dfd-b8fe6b0bbfbb",
      "name": "Embeddings OpenAI1",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        200,
        900
      ],
      "credentials": {
        "openAiApi": {
          "id": "jpK6UkKnpLM9LJPk",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "chunkSize": 10000000
      },
      "id": "1dd6b9a9-4bac-4dd7-b1ce-345da29f39fc",
      "name": "Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        440,
        1160
      ]
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "n8n_test",
          "mode": "list",
          "cachedResultName": "n8n_test"
        },
        "options": {
          "queryName": "match5_documents"
        }
      },
      "id": "63c5573f-409a-47b6-b833-98e2fd67c4c9",
      "name": "Insert into Supabase Vectorstore",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        300,
        680
      ],
      "credentials": {
        "supabaseApi": {
          "id": "g2fuxg9JpTFapfzz",
          "name": "Supabase Nostar"
        }
      }
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "n8n_metadata",
          "mode": "list",
          "cachedResultName": "n8n_metadata"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('Set File ID').item.json.file_id }}",
            "title": "={{ $('Set File ID').item.json.file_title.replaceSpecialChars() }}",
            "url": "={{ $('Set File ID').item.json.file_url }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "schema",
              "displayName": "schema",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1260,
        700
      ],
      "id": "ed1b09da-25d3-4c0a-8136-c8f2b708916e",
      "name": "Insert Document Metadata",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "aU6gEnNNOwoNT9SD",
          "name": "Postgres Nostar"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "10646eae-ae46-4327-a4dc-9987c2d76173",
              "name": "file_id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "f4536df5-d0b1-4392-bf17-b8137fb31a44",
              "name": "file_type",
              "value": "={{ $json.mimeType }}",
              "type": "string"
            },
            {
              "id": "77d782de-169d-4a46-8a8e-a3831c04d90f",
              "name": "file_title",
              "value": "={{ $json.name }}",
              "type": "string"
            },
            {
              "id": "9bde4d7f-e4f3-4ebd-9338-dce1350f9eab",
              "name": "file_url",
              "value": "={{ $json.webViewLink }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "30e63df2-9d0e-47b0-8d06-59b5eda6efb1",
      "name": "Set File ID",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1480,
        700
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT table_name\nFROM information_schema.tables\nWHERE table_schema = 'public' and table_name like 'n8n%'\norder by length(table_name) Asc;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1880,
        380
      ],
      "id": "b404bd47-f24c-452b-bfc4-f3cdbad25124",
      "name": "Postgres1",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "aU6gEnNNOwoNT9SD",
          "name": "Postgres Nostar"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1660,
        380
      ],
      "id": "43a18f45-825b-4e8e-866c-387f435cd2b6",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "operation": "deleteTable",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "={{ $json.table_name }}",
          "mode": "name"
        },
        "restartSequences": true,
        "options": {
          "cascade": true
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1400,
        400
      ],
      "id": "cdac757b-db93-4b1d-a55b-24b28e4e997c",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "aU6gEnNNOwoNT9SD",
          "name": "Postgres Nostar"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "d15e917b-43d2-40b8-8b49-af467ff63961",
              "leftValue": "={{ $json.data[0].parseJson().skipped }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -680,
        700
      ],
      "id": "608e746a-6800-475c-82d2-46072ca103be",
      "name": "If"
    },
    {
      "parameters": {
        "resource": "folder",
        "operation": "delete",
        "bucketName": "images",
        "folderKey": "extracted_images"
      },
      "type": "n8n-nodes-base.s3",
      "typeVersion": 1,
      "position": [
        -1120,
        360
      ],
      "id": "b0d5fe24-0343-42d9-85b7-3598a7ddcaa5",
      "name": "S31",
      "credentials": {
        "s3": {
          "id": "TzMoQKNcBQc2IBGc",
          "name": "S3 account NoStar"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "resource": "folder",
        "bucketName": "images",
        "folderName": "extracted_images",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.s3",
      "typeVersion": 1,
      "position": [
        -900,
        360
      ],
      "id": "08604e18-2591-4b5b-a8f8-c41fb4195916",
      "name": "S32",
      "credentials": {
        "s3": {
          "id": "TzMoQKNcBQc2IBGc",
          "name": "S3 account NoStar"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 0. Parse the incoming Document data if it's still a string\nlet raw = $input.first().json['Document data'];\nlet arr = typeof raw === 'string' ? JSON.parse(raw) : raw;\nlet source = $input.first().json['Document name'];\nlet source_id = $('Insert Document Metadata').first().json.id\n\n// Helper: return character length of an array object\nfunction getObjLength(obj) {\n  console.log(obj, typeof(obj));\n  return (obj.content || '').length;\n}\n\nfunction getObjLengthofTextOnly(obj) {\n  if (obj.type === 'image_ocr') {\n    return 0;\n  }\n  return (obj.content || '').length;\n}\n\n// Split any single item whose content is > chunkSize into multiple items\nfunction splitOversizedItems(arr, chunkSize) {\n  const result = [];\n  for (const item of arr) {\n    const content = item.content || '';\n    if (content.length <= chunkSize) {\n      result.push(item);\n    } else {\n      // slice into parts of size chunkSize\n      for (let start = 0; start < content.length; start += chunkSize) {\n        const part = content.slice(start, start + chunkSize);\n        // carry over other fields (type, filename, etc.)\n        result.push({ ...item, content: part });\n      }\n    }\n  }\n  return result;\n}\n\n// Chunking function\nfunction chunkByCharLength(arr, source, chunkSize = 1000) {\n  // first, split oversized items\n  const flat = splitOversizedItems(arr, chunkSize);\n\n  const response = [];\n  let idx = 0;\n  let charPos = 0;\n\n  while (idx < flat.length) {\n    const a = [];\n    let sum = 0;\n    const from = charPos;\n\n    // collect until we hit chunkSize\n    while (idx < flat.length && sum < chunkSize) {\n      const item = flat[idx];\n      const len = getObjLength(item);\n      const text_len = getObjLengthofTextOnly(item);\n      a.push(item);\n      sum += len;\n      charPos += text_len;\n      idx++;\n    }\n\n    const to = charPos;\n    const metadata = {\n      source: source,\n      source_metadata_id: source_id,\n      loc: { Characters: { from, to } }\n    };\n\n    response.push({\n      content: JSON.stringify({\n        pageContent: a,\n        metadata\n      })\n    });\n  }\n\n  return response;\n}\n\n// 1. Run chunking\nconst chunks = chunkByCharLength(arr, source, 1000);\n\n// 2. Return in n8n‑compatible format\nreturn chunks.map(c => ({ json: c }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -20,
        680
      ],
      "id": "eb85e6c4-d79d-4453-b1bf-5c018a6e41df",
      "name": "Code1"
    },
    {
      "parameters": {
        "formTitle": "Refresh Database ???",
        "formDescription": "Delete and re-Upload all data in Supabase.",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Start Refresh",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Yes"
                  },
                  {
                    "option": "No"
                  }
                ]
              },
              "requiredField": true
            }
          ]
        },
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -2360,
        400
      ],
      "id": "29d6e1af-3ae8-484a-8cd2-e5f39af3cfd7",
      "name": "On form submission1",
      "webhookId": "f45b4397-2416-4118-b3b3-2ef273ba3bcb"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "32d90ae7-9278-4011-9469-ba387d9d9ed1",
              "leftValue": "={{ $json['Start Refresh'] }}",
              "rightValue": "Yes",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2160,
        400
      ],
      "id": "b2fa1e08-441b-4751-8a36-58aaf2b8dc27",
      "name": "If3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5132d92c-41da-4a55-ad79-0c329ca7e626",
              "name": "Document name",
              "value": "={{ $('HTTP Request').item.json.data[0].parseJson().source }}",
              "type": "string"
            },
            {
              "id": "c8160701-2be7-43c6-bcfa-295fbebe0e23",
              "name": "Document data",
              "value": "={{ $('HTTP Request').item.json.data[0].parseJson().blocks }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -320,
        680
      ],
      "id": "d23465b0-ff4c-4f68-9011-b05d0a8d9e8b",
      "name": "Edit Fields1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -680,
        960
      ],
      "id": "d249c869-fc93-4864-af7e-b9b0e8203d34",
      "name": "Wait1",
      "webhookId": "29a6451b-8a53-4598-b4fe-e11241eb51ab"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n    \"data\": \"{{ $json.data }}\", \n    \"fileName\": \"{{ $json.filename }}\", \n    \"mimeType\": \"image/png\"\n}\n\n\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        80,
        440
      ],
      "id": "7801871f-16b0-467c-944d-e92f86fa1d17",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "data",
        "options": {
          "fileName": "={{ $('Insert Document Metadata').item.json.id +\"_\"+ $json.fileName}}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        280,
        440
      ],
      "id": "3189379c-83c6-4bd5-9659-a9261c7c2828",
      "name": "Convert to File1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7e6dcc66-0501-4739-a738-909878c4b23d",
              "name": "images",
              "value": "={{ $('HTTP Request').item.json.data[0].parseJson().images }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -340,
        440
      ],
      "id": "3e8f1e4b-61eb-4da0-8c8d-fdc67d4472db",
      "name": "Edit Fields4"
    },
    {
      "parameters": {
        "fieldToSplitOut": "images",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -120,
        440
      ],
      "id": "81c75ad9-f090-41e8-a9bb-e766e558d670",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "operation": "upload",
        "bucketName": "images",
        "fileName": "=",
        "additionalFields": {
          "parentFolderKey": "extracted_images"
        }
      },
      "type": "n8n-nodes-base.s3",
      "typeVersion": 1,
      "position": [
        480,
        440
      ],
      "id": "48321a30-9a62-42e7-a5c8-01992bf8eb31",
      "name": "S33",
      "credentials": {
        "s3": {
          "id": "TzMoQKNcBQc2IBGc",
          "name": "S3 account NoStar"
        }
      }
    }
  ],
  "origin": "n8n",
  "pinData": {},
  "repo": {
    "owner": "AnushaPriya2",
    "name": "n8n-workflow-backups"
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-07-27T15:45:00.000Z",
  "versionId": "12641f66-11eb-459f-b139-a0e27981e36e"
}